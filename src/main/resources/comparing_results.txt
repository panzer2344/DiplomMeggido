speedComparing_1 100 values. rate from 1 to 2000 excluded with step 20. offset 0.5. In each iteration built 5 * rate inequalities.

Meggido: [4, 68, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 0, 0, 1, 1, 0, 0, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2]
Simplex: [20, 6, 4, 9, 9, 7, 10, 11, 20, 16, 20, 25, 41, 48, 60, 71, 72, 74, 88, 90, 86, 90, 104, 119, 118, 134, 146, 144, 163, 201, 184, 194, 260, 229, 241, 260, 345, 275, 299, 302, 338, 333, 362, 455, 399, 411, 554, 416, 428, 526, 464, 450, 547, 470, 591, 522, 634, 550, 644, 759, 673, 671, 809, 786, 837, 1045, 936, 966, 1104, 1895, 1202, 1224, 1324, 1334, 1385, 1411, 1464, 1520, 1478, 1458, 1573, 1471, 1764, 1692, 1763, 1971, 1899, 1904, 2073, 2165, 1869, 1919, 2283, 2816, 2404, 2295, 2485, 2495, 2488, 2510]

speedComparing_2 100 values. rate from 1 to 2000 excluded with step 20. offset 0.5. In each iteration built 6 * rate inequalities.

Meggido: [54, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 2]
Simplex: [20, 9, 7, 11, 6, 10, 13, 22, 20, 25, 42, 46, 54, 58, 73, 82, 100, 95, 110, 120, 154, 155, 161, 179, 189, 215, 271, 243, 259, 297, 299, 318, 405, 365, 379, 475, 427, 449, 566, 503, 531, 605, 589, 664, 572, 733, 623, 713, 669, 742, 854, 757, 834, 869, 881, 914, 957, 995, 1033, 1069, 1105, 1143, 1379, 1410, 1396, 1485, 1697, 1643, 1687, 1768, 1760, 1942, 1968, 2023, 1995, 2143, 2251, 2384, 2356, 2403, 2455, 2658, 2702, 2819, 2854, 2899, 3024, 3067, 3145, 3170, 3316, 3488, 3464, 3498, 3551, 3584, 3941, 4032, 4193, 4259]

speedComparing_3 100 values. rate from 1 to 2000 excluded with step 20. offset 0.5. In each iteration built 4 * rate inequalities.

Meggido: [2, 58, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1]
Simplex: [15, 5, 5, 5, 7, 5, 7, 7, 8, 16, 13, 15, 21, 28, 25, 32, 38, 42, 63, 58, 59, 64, 65, 71, 83, 97, 93, 98, 116, 113, 120, 133, 150, 160, 155, 165, 176, 195, 196, 206, 216, 244, 308, 248, 258, 273, 283, 312, 308, 324, 338, 432, 365, 355, 364, 447, 393, 403, 531, 433, 447, 550, 477, 489, 543, 525, 598, 561, 667, 598, 677, 748, 805, 748, 744, 742, 821, 906, 1024, 861, 848, 907, 1057, 1153, 1368, 1045, 1531, 1236, 1422, 1487, 2392, 1821, 1553, 1424, 1779, 1822, 1535, 1452, 1818, 1650]

speedComparing_realistic_1. 100 values. rate from 1 to 1500 excluded with step 15. In each iteration built 8 * rate inequalities.

Meggido: [1, 66, 3, 1, 4, 3, 4, 3, 4, 2, 4, 2, 2, 2, 2, 1, 2, 2, 1, 3, 2, 2, 2, 2, 3, 4, 2, 1, 2, 2, 2, 2, 2, 3, 2, 1, 3, 2, 2, 1, 3, 2, 2, 2, 3, 1, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 4, 3, 3, 3, 82, 3, 3, 2, 5, 2, 1, 5, 3, 3, 4, 3, 3, 3, 3, 4, 3, 2, 3, 7, 3, 3, 3, 3, 3, 3, 4]
Simplex: [23, 6, 5, 10, 6, 11, 11, 21, 20, 26, 42, 46, 51, 69, 67, 78, 99, 107, 109, 117, 165, 153, 166, 182, 195, 253, 267, 233, 254, 290, 299, 328, 403, 355, 376, 477, 420, 447, 570, 609, 565, 608, 726, 1368, 779, 748, 643, 966, 1032, 1026, 918, 1090, 1167, 1319, 1250, 1170, 1022, 1114, 1550, 1389, 1499, 1517, 1507, 1517, 1571, 1549, 1595, 1901, 1851, 1950, 1859, 3043, 2134, 3058, 2698, 2580, 2810, 3409, 2816, 3643, 3416, 3538, 4018, 3330, 4393, 3312, 3329, 3767, 4952, 3236, 4597, 5902, 4495, 5587, 5345, 4032, 4257, 4843, 4210, 4757]

speedComparing_realistic_2. 100 values. rate from 1 to 2000 excluded with step 20. In each iteration built 8 * rate inequalities.

Meggido: [2, 55, 4, 4, 3, 3, 3, 2, 3, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 4, 4, 5, 3, 4, 3, 3, 5, 2, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 3, 2, 4, 3, 3, 3, 4, 4, 3, 4, 3, 3, 4, 5, 4, 4, 3, 4, 3, 3, 4, 4, 4, 4, 4, 4, 7]
Simplex: [17, 10, 10, 9, 9, 14, 25, 27, 43, 57, 61, 76, 86, 127, 122, 142, 174, 190, 193, 215, 235, 273, 287, 308, 366, 373, 418, 477, 460, 584, 521, 555, 715, 632, 670, 733, 762, 942, 808, 844, 937, 944, 1007, 1069, 1082, 1308, 1202, 1273, 1462, 1391, 1724, 1534, 1913, 1664, 2080, 1821, 2149, 2000, 2239, 2545, 2312, 2441, 2596, 2763, 2960, 3027, 3423, 3441, 3571, 3859, 3905, 4215, 3998, 4121, 4146, 4457, 4647, 4958, 5637, 5396, 5816, 5995, 6217, 6803, 6960, 7391, 7474, 8358, 8486, 8621, 9178, 9532, 9999, 10622, 11248, 11660, 12046, 15002, 16104, 14327]

speedCheck_onlyMeggido 20 values. rate from 1 to 1 000 000 excluded with step 50 000. In each iteration built 8 * rate inequalities.
Meggido: [4, 847, 685, 1247, 838, 1564, 2595, 3245, 3331, 4137, 3873, 4198, 4782, 4905, 6165, 7572, 13528, 14435, 18105, 21800]

speedCheck_onlyMeggido_2 100 values. rate from 1 to 1 000 000 excluded with step 10 000. In each iteration built 8 * rate inequalities.
Meggido: [2, 269, 126, 327, 343, 134, 152, 175, 205, 237, 249, 295, 282, 313, 370, 403, 334, 439, 537, 497, 579, 684, 628, 659, 731, 689, 774, 809, 932, 1009, 1172, 1135, 1045, 2869, 3135, 3266, 3076, 3690, 1247, 3368, 3693, 3404, 3617, 1603, 1519, 3411, 1673, 4049, 2020, 3268, 4525, 2062, 4912, 2046, 4830, 1997, 5219, 2466, 5230, 2251, 4884, 2367, 5802, 2600, 5582, 2642, 6206, 3101, 6350, 2715, 5792, 2963, 6504, 2836, 6148, 2990, 6022, 3141, 6224, 3225, 5349, 3347, 7228, 3674, 5932, 3382, 6104, 3369, 6864, 9117, 15390, 15128, 15668, 14871, 11118, 9802, 16938, 11354, 12305, 8481]